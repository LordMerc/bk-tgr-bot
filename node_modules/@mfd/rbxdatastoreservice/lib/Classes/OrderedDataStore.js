"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderedDataStore = void 0;
const DataStore_1 = require("./DataStore");
const DataStorePages_1 = require("./DataStorePages");
const Globals_1 = require("../Util/Globals");
const FastLogTool_1 = require("../Tools/FastLogTool");
FastLogTool_1.DYNAMIC_FASTINTVARIABLE('DataStoreMaxPageSize', 100);
/**
 * A OrderedDataStore is essentially a GlobalDataStore with the exception that stored values must be positive integers.
 * It exposes a method GetSortedAsync() which allows inspection of the entries in sorted order using a DataStorePages object.
 * See the Data Stores article for an overview on using ordered data stores.
 */
class OrderedDataStore extends DataStore_1.DataStore {
    constructor(name, scope) {
        super(name, scope, false);
    }
    /**
     * @internal
     */
    constructGetSortedUrl(isAscending, pagesize, minValue, maxValue) {
        const placeId = Globals_1.Globals.PlaceID;
        let url = `${this.serviceUrl}getSortedValues?placeId=${placeId}&type=${this.getDataStoreTypeString()}&scope=${this.scopeUrlEncodedIfNeeded.toString()}&key=${this.nameUrlEncodedIfNeeded.toString()}&pageSize=${pagesize}&ascending=${isAscending ? 'True' : 'False'}`;
        if (minValue && typeof minValue === 'number')
            url += '&inclusiveMinValue=' + Math.floor(minValue).toString();
        if (maxValue && typeof maxValue === 'number')
            url += '&inclusiveMaxValue=' + Math.floor(maxValue).toString();
        return url.toString();
    }
    /**
     * @internal
     */
    checkValueIsAllowed(v) {
        return typeof v === 'number';
    }
    /**
     * @internal
     */
    getDataStoreTypeString() {
        return 'sorted';
    }
    /**
     * Returns a DataStorePages object.
     * The sort order is determined by ascending,
     * the length of each page by pageSize,
     * and minValue/maxValue are optional parameters which filter the results.
     * If this function throws an error,
     * the error message will describe the problem.
     * @param isAscending A boolean indicating whether the returned data pages are in ascending order.
     * @param pagesize The length of each page.
     * @param minValue Optional parameter. If set, data pages with a value less than than minValue will be excluded.
     * @param maxValue Optional parameter. If set, data pages with a value greater than maxValue will be excluded.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    async GetSortedAsync(isAscending, pagesize, minValue, maxValue) {
        return new Promise(async (resumeFunction, errorFunction) => {
            if (!(minValue === undefined) && !this.checkValueIsAllowed(minValue))
                return errorFunction('MinValue has to be integer or undefined');
            if (!(maxValue === undefined) && !this.checkValueIsAllowed(maxValue))
                return errorFunction('MaxValue has to be integer or undefined');
            if (pagesize < 0)
                return errorFunction('PageSize has to be more or equal to zero');
            if (pagesize > FastLogTool_1.DFInt('DataStoreMaxPageSize'))
                return errorFunction('PageSize is too large');
            const url = this.constructGetSortedUrl(isAscending, pagesize, minValue, maxValue);
            const pagination = new DataStorePages_1.DataStorePages(this, url);
            await pagination.AdvanceToNextPageAsync();
            return resumeFunction(pagination);
        });
    }
}
exports.OrderedDataStore = OrderedDataStore;
