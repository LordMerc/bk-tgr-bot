"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataStorePages = void 0;
const OrderedDataStore_1 = require("./OrderedDataStore");
const HttpRequest_1 = require("./HttpRequest");
const DataStoreService_1 = require("./Services/DataStoreService");
const Pages_1 = require("./Pages");
const ExecutionHelper_1 = require("../Helpers/ExecutionHelper");
/**
 * A special type of Pages object whose pages contain key/value pairs from an OrderedDataStore.
 * For this object,
 * GetCurrentPage() returns an array of tables,
 * each containing keys named key and value;
 * these reflect the key/value pair data.
 */
class DataStorePages extends Pages_1.Pages {
    constructor(ds, requestUrl) {
        super();
        this.ds = ds;
        this.requestUrl = requestUrl;
        this.exclusiveStartKey = '';
    }
    /**
     * @internal
     */
    async FetchNextChunk() {
        return new Promise((resumeFunction, errorFunction) => {
            const request = new HttpRequest_1.HttpRequest();
            const ods = this.ds;
            if (!ods) {
                return errorFunction('OrderedDataStore no longer exists');
            }
            request.url =
                this.exclusiveStartKey.length === 0
                    ? this.requestUrl
                    : `${this.requestUrl.toString()}&exclusiveStartKey=${this.exclusiveStartKey.toString()}`;
            request.requestType = DataStoreService_1.RequestType.GET_SORTED_ASYNC_PAGE;
            request.owner = ods;
            ExecutionHelper_1.ExectionHelper.ExecuteGetSorted(request).then((r) => {
                const [success, result] = OrderedDataStore_1.OrderedDataStore.deserializeVariant(r.data);
                if (!success)
                    return errorFunction("Can't parse response");
                const deserialized = result['data']['Entries'].length !== 0 ? result['data']['Entries'] : '[]';
                const newValue = [];
                for (let i = 0; i < deserialized.length; i++) {
                    newValue.push({
                        Value: OrderedDataStore_1.OrderedDataStore.deserializeVariant(deserialized[i]['Value'])[1],
                        Key: deserialized[i]['Target'],
                    });
                }
                this.currentPage = newValue;
                return resumeFunction();
            });
        });
    }
    /**
     * Iterates to the next page in the pages object,
     * if possible.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    async AdvanceToNextPageAsync() {
        return new Promise(async (resumeFunction) => {
            if (this.finished) {
                console.error('No pages to advance to');
                return resumeFunction();
            }
            await this.FetchNextChunk();
            resumeFunction();
        });
    }
}
exports.DataStorePages = DataStorePages;
