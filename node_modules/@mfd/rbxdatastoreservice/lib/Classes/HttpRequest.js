"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequest = void 0;
const axios_1 = __importDefault(require("axios"));
const Globals_1 = require("../Util/Globals");
const https_1 = require("https");
const FastLogTool_1 = require("../Tools/FastLogTool");
FastLogTool_1.FASTFLAG('Debug');
class HttpRequest {
    constructor() {
        this.additionalHeaders = {};
        this.doNotParse = false;
    }
    async execute(_dataStoreService) {
        return new Promise((resumeFunction, errorFunction) => {
            const http = {
                headers: {
                    ...Globals_1.Globals.GlobalHeaders(),
                    ...this.additionalHeaders,
                },
                transformResponse: (resp, headers) => {
                    if (this.doNotParse)
                        return resp;
                    if (headers && headers['content-type'] && headers['content-type'].includes('json'))
                        try {
                            return JSON.parse(resp);
                        }
                        catch {
                            return resp; // TODO Report an error here.
                        }
                    return resp;
                },
                httpsAgent: new https_1.Agent({ rejectUnauthorized: !FastLogTool_1.FFlag['Debug'] }),
            };
            if (!this.method)
                axios_1.default.post(this.url, this.postData === undefined || this.postData.length === 0 ? ' ' : this.postData, http)
                    .then((res) => {
                    resumeFunction(res);
                })
                    .catch((e) => {
                    errorFunction(e);
                });
            else if (this.method === 'GET')
                axios_1.default.get(this.url, http)
                    .then((res) => {
                    resumeFunction(res);
                })
                    .catch((e) => {
                    errorFunction(e);
                });
            else if (this.method === 'DELETE')
                axios_1.default.delete(this.url, http)
                    .then((res) => {
                    resumeFunction(res);
                })
                    .catch((e) => {
                    errorFunction(e);
                });
        });
    }
}
exports.HttpRequest = HttpRequest;
