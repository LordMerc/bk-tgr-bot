export declare class BaseURL {
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.GetBaseURL(System.Nullable`1)}
     * Gets the UnsecureBaseURL from {Roblox.Common.Client.Urls}
     * @param {boolean?} preferApex Should this use the apexDomain over the baseUrl?
     * @returns {string} Returns a string
     */
    static GetBaseURL(preferApex?: boolean): string;
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.GetSecureBaseURL(System.Nullable`1)}
     * Gets the SecureBaseURL from {Roblox.Common.Client.Urls}
     * @param {boolean?} preferApex Should this use the apexDomain over the baseUrl?
     * @returns {string} Returns a string
     */
    static GetSecureBaseURL(preferApex?: boolean): string;
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.GetBaseHost(System.Nullable`1)}
     * Gets the BaseHost from {Roblox.Common.Client.Urls}
     * @param {boolean?} preferApex Should this use the apexDomain over the baseUrl?
     * @returns {string} Returns a string
     */
    static GetBaseHost(preferApex?: boolean): string;
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.ConstructServicePathFromSubDomain(System.String,System.Nullable`1,System.Nullable`1,System.Nullable`1,System.Nullable`1)}
     * Construct a serviceUri from the given parameters.
     * @param {string} subDomain Depending on if {preferApex} is set, this will construct the same url but with different times.
     * @param {string} servicePath A service path to be parsed and trimmed of trailing slashes if {trimTrailingSlashes} is set.
     * @param {Record<string, any>} queryParameters A {System.Collections.Generic.ICollection`2} of query parameters.
     * @param {boolean} fetchSecureBaseUri Determines if the baseUri should start with https (true) or http (false/null)
     * @param {boolean} preferApex Determines if the ApexDomain is used over the baseUrl.
     * @param {boolean} trimTrailingSlashes Should it trim trailing slashes away from the servicePath
     * @returns {string} Returns string
     */
    static ConstructServicePathFromSubDomain(subDomain: string, servicePath?: string, queryParameters?: Record<string, any>, fetchSecureBaseUri?: boolean, preferApex?: boolean, trimTrailingSlashes?: boolean): string;
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.ConstructServicePathFromHost(System.String,System.Nullable`1,System.Nullable`1,System.Nullable`1,System.Nullable`1)}
     * Construct a serviceUri from the given parameters.
     * @param {string} hostName The host to construct with.
     * @param {string} servicePath A service path to be parsed and trimmed of trailing slashes if {trimTrailingSlashes} is set.
     * @param {Record<string, any>} queryParameters A {System.Collections.Generic.ICollection`2} of query parameters.
     * @param {boolean} fetchSecureBaseUri Determines if the baseUri should start with https (true) or http (false/null)
     * @param {boolean} trimTrailingSlashes Should it trim trailing slashes away from the servicePath
     * @returns {string} Returns string
     */
    static ConstructServicePathFromHost(hostName: string, servicePath?: string, queryParameters?: Record<string, any>, fetchSecureBaseUri?: boolean, trimTrailingSlashes?: boolean): string;
}
export declare class UrlHelper {
    static GetRobloxGamePersistenceHost(): string;
    static GetRobloxServiceHost(sub: string): string;
    static GetBaseHost(): string;
}
export declare const GlobalURLS: {
    Production: {
        Apex: string;
        BaseUrl: string;
    };
    TestSites: {
        Apex: string;
        SiteTest1: {
            Apex: string;
            BaseUrl: string;
        };
        SiteTest2: {
            Apex: string;
            BaseUrl: string;
        };
        SiteTest3: {
            Apex: string;
            BaseUrl: string;
        };
        SiteTest4: {
            Apex: string;
            BaseUrl: string;
        };
    };
};
