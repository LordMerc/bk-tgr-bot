import { DataStore } from './DataStore';
import { DataStorePages } from './DataStorePages';
/**
 * A OrderedDataStore is essentially a GlobalDataStore with the exception that stored values must be positive integers.
 * It exposes a method GetSortedAsync() which allows inspection of the entries in sorted order using a DataStorePages object.
 * See the Data Stores article for an overview on using ordered data stores.
 */
export declare class OrderedDataStore extends DataStore {
    constructor(name: string, scope: string);
    /**
     * Returns a DataStorePages object.
     * The sort order is determined by ascending,
     * the length of each page by pageSize,
     * and minValue/maxValue are optional parameters which filter the results.
     * If this function throws an error,
     * the error message will describe the problem.
     * @param isAscending A boolean indicating whether the returned data pages are in ascending order.
     * @param pagesize The length of each page.
     * @param minValue Optional parameter. If set, data pages with a value less than than minValue will be excluded.
     * @param maxValue Optional parameter. If set, data pages with a value greater than maxValue will be excluded.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    GetSortedAsync<Variant extends any>(isAscending: boolean, pagesize: number, minValue?: Variant, maxValue?: Variant): Promise<DataStorePages>;
}
