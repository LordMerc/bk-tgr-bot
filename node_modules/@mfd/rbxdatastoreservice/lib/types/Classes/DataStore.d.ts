import { DataStoreSetOptions } from './DataStoreSetOptions';
import { DataStoreIncrementOptions } from './DataStoreIncrementOptions';
import { RBXScriptConnection } from './RBXScriptConnection';
/**
 * A GlobalDataStore exposes functions for saving and loading data for the DataStoreService.
 * See the Data Stores article for an in-depth guide on data structure,
 * management,
 * error handling,
 * etc.
 */
export declare class DataStore {
    constructor(name: string, scope: string, legacy: boolean);
    static serializeVariant<Variant extends any>(variant: Variant): [boolean, string];
    static deserializeVariant<Variant extends any>(webValue: string): [boolean, Variant | unknown];
    /**
     * Returns the value of the entry in the data store with the given key.
     * This function returns the value of the entry in the GlobalDataStore with the given key.
     * If the key does not exist,
     * returns undefined.
     * This function used to cache for about 4 seconds,
     * so you couldn't be sure that it returns the current value saved on the Roblox servers.
     * If this function throws an error,
     * the error message will describe the problem.
     * Note that there are also limits that will soon apply to this function.
     * @param key The key identifying the entry being retrieved from the data store.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    GetAsync<Variant extends any>(key: string): Promise<Variant | unknown>;
    /**
     *
     * Sets the value of the key.
     * This overwrites any existing data stored in the key.
     *
     * ---
     * CRITICAL
     * --------
     * If the previous value of the key is important,
     * use UpdateAsync() instead.
     * Using GetAsync() to retrieve a value and then setting the key with SetAsync() is risky because GetAsync() sometimes returns cached data and other game servers may have modified the key.
     *
     * ---
     * NOTICE
     * -------
     * Any string being stored in a data store must be valid UTF-8.
     * In UTF-8,
     * values greater than 127 are used exclusively for encoding multi-byte codepoints,
     * so a single byte greater than 127 will not be valid UTF-8 and the SetAsync() attempt will fail.
     *
     * ---
     * If this function throws an error,
     * the error message will describe the problem.
     * Note that there are also limits that apply to this function.
     * See the Data Stores article for an in-depth guide on data structure,
     * management,
     * error handling, etc.
     * @param key The key identifying the entry being retrieved from the data store.
     * @param value The value of the entry in the data store with the given key.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    SetAsync<Variant extends any>(key: string, value: Variant, userIds?: Array<number>, options?: DataStoreSetOptions): Promise<void>;
    /**
     * Increments the value of a particular key and returns the incremented value.
     * Only works on values that are integers.
     * Note that you can use OnUpdate() - Not Implemented - to execute a function every time the database updates the key’s value,
     * such as after calling this function.
     * If this function throws an error,
     * the error message will describe the problem.
     * Note that there are also limits that apply to this function.
     * See the Data Stores article for an in-depth guide on data structure,
     * management,
     * error handling, etc.
     * @param key The key identifying the entry being retrieved from the data store.
     * @param delta The increment amount.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    IncrementAsync(key: string, delta?: number, userIds?: Array<number>, options?: DataStoreIncrementOptions): Promise<number>;
    /**
     * Retrieves the value of a key from a data store and updates it with a new value.
     * This function retrieves the value of a key from a data store and updates it with a new value.
     * Since this function validates the data,
     * it should be used in favor of SetAsync() when there’s a chance that more than one server can edit the same data at the same time.
     * The second parameter is a function which you need to provide.
     * The function takes the key’s old value as input and returns the new value,
     * with these exceptions:
     * - If the key does not exist, the old value passed to the function will be nil.
     * - If the function returns nil, the update is cancelled.
     * The value returned by this function is the new value,
     * returned once the altered data is properly saved.
     *
     * ---
     * INFO
     * -----
     * In cases where another game server updated the key in the short timespan between retrieving the key's current value and setting the key's value,
     * UpdateAsync() will call the function again to ensure that no data is overwritten.
     * The function will be called as many times as needed until the data is saved.
     *
     * ---
     * CRITICAL
     * ---------
     * The function you define as the second parameter of UpdateAsync() cannot yield,
     * so do not include calls like setTimeout().
     *
     * ---
     * NOTICE
     * -------
     * Any string being stored in a data store must be valid UTF-8.
     * In UTF-8,
     * values greater than 127 are used exclusively for encoding multi-byte codepoints,
     * so a single byte greater than 127 will not be valid UTF-8 and the SetAsync() attempt will fail.
     *
     * ---
     * If this function throws an error,
     * the error message will describe the problem.
     * Note that there are also limits that apply to this function.
     * See the Data Stores article for an in-depth guide on data structure,
     * management,
     * error handling, etc.
     * @param key The key identifying the entry being retrieved from the data store.
     * @param transformFunc A function which you need to provide. The function takes the key’s old value as input and returns the new value.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    UpdateAsync<Variant extends any>(key: string, transformFunc: (previousValue: Variant) => Variant): Promise<Variant>;
    /**
     * Removes the given key from the data store and returns the value associated with that key.
     * This function removes the given key from the provided GlobalDataStore and returns the value that was associated with that key.
     * If the key is not found in the data store,
     * this function returns undefined.
     * If this function throws an error,
     * the error message will describe the problem.
     * Note that there are also limits that apply to this function.
     * See the Data Stores article for an in-depth guide on data structure,
     * management,
     * error handling, etc.
     * @param key The key identifying the entry being retrieved from the data store.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     */
    RemoveAsync<Variant extends any>(key: string): Promise<Variant>;
    /**
     * This function sets **callback** as the function to be run any time the value associated with the data store's key changes.
     * Once every minute,
     * OnUpdate polls for changes by other servers.
     * Changes made on the same server will run the function immediately.
     * In other words,
     * functions like IncrementAsync(),
     * SetAsync(),
     * and UpdateAsync() change the key’s value in the data store and will cause the function to run.
     * See the Data Stores article for an in-depth guide on data structure,
     * management,
     * error handling, etc.
     * @param key The key identifying the entry being retrieved from the data store
     * @param callback The function to be executed any time the value associated with **key** is changed
     * @returns {RBXScriptConnection} The connection to the key being tracked for updates
     * @deprecated This function has been deprecated and should not be used in new work. You can use the {@link https://www.npmjs.com/package/@mfd/rbxmessagingservice|Cross Server Messaging Service} to publish and subscribe to topics to receive near real-time updates, completely replacing the need for this function.
     */
    OnUpdate(key: string, callback: <Variant extends any>(newValue: Variant) => any): RBXScriptConnection;
}
