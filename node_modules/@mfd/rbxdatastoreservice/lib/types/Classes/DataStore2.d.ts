import { DataStoreSetOptions } from './DataStoreSetOptions';
import { DataStore } from './DataStore';
import { DataStoreIncrementOptions } from './DataStoreIncrementOptions';
import { SortDirection } from '../Enumeration/SortDirection';
export declare class DataStore2 extends DataStore {
    constructor(name: string, scope: string, legacy: boolean);
    GetAsync<Variant extends any>(key: string): Promise<Variant | unknown>;
    SetAsync<Variant extends any>(key: string, value: Variant, userIds?: Array<number>, options?: DataStoreSetOptions): Promise<void>;
    RemoveAsync<Variant extends any>(key: string): Promise<Variant>;
    IncrementAsync(key: string, delta?: number, userIds?: Array<number>, options?: DataStoreIncrementOptions): Promise<number>;
    /**
     * Returns the value of the entry in the data store with the given key and version.
     * This function returns the value of the entry in the GlobalDataStore with the given key.
     * If the key does not exist,
     * returns undefined.
     * This function used to cache for about 4 seconds,
     * so you couldn't be sure that it returns the current value saved on the Roblox servers.
     * If this function throws an error,
     * the error message will describe the problem.
     * Note that there are also limits that will soon apply to this function.
     * @param {string} key The key identifying the entry being retrieved from the data store.
     * @param {string} version The version identifying the entry version being retrieved from the data store.
     * @yields This is a yielding function. When called, it will pause the JavaScript thread that called the function until a result is ready to be returned, without interrupting other scripts.
     * @returns {Variant} The value of the entry in the data store with the given key
     */
    GetVersionAsync<Variant extends any>(key: string, version: string): Promise<Variant | unknown>;
    ListKeysAsync(prefix?: string, pageSize?: number): Promise<void>;
    ListVersionsAsync(key: string, sortDirection?: SortDirection, minDate?: number, maxDate?: number, pageSize?: number): Promise<void>;
    RemoveVersionAsync(key: string, version: string): Promise<void>;
}
