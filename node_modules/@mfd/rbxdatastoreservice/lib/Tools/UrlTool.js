"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalURLS = exports.UrlHelper = exports.BaseURL = void 0;
const FastLogTool_1 = require("./FastLogTool");
const querystring_1 = __importDefault(require("querystring"));
FastLogTool_1.FASTFLAG('Debug');
FastLogTool_1.DYNAMIC_FASTSTRINGVARIABLE('PreferredTestSite', 'SiteTest1');
class BaseURL {
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.GetBaseURL(System.Nullable`1)}
     * Gets the UnsecureBaseURL from {Roblox.Common.Client.Urls}
     * @param {boolean?} preferApex Should this use the apexDomain over the baseUrl?
     * @returns {string} Returns a string
     */
    static GetBaseURL(preferApex = false) {
        return BaseURL.GetSecureBaseURL(preferApex).replace('https://', 'http://');
    }
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.GetSecureBaseURL(System.Nullable`1)}
     * Gets the SecureBaseURL from {Roblox.Common.Client.Urls}
     * @param {boolean?} preferApex Should this use the apexDomain over the baseUrl?
     * @returns {string} Returns a string
     */
    static GetSecureBaseURL(preferApex = false) {
        return `https://${FastLogTool_1.FFlag['Debug']
            ? exports.GlobalURLS.TestSites[FastLogTool_1.DFString('PreferredTestSite') ? FastLogTool_1.DFString('PreferredTestSite') : 'SiteTest1'][preferApex ? 'Apex' : 'BaseUrl']
            : exports.GlobalURLS.Production[preferApex ? 'Apex' : 'BaseUrl']}`;
    }
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.GetBaseHost(System.Nullable`1)}
     * Gets the BaseHost from {Roblox.Common.Client.Urls}
     * @param {boolean?} preferApex Should this use the apexDomain over the baseUrl?
     * @returns {string} Returns a string
     */
    static GetBaseHost(preferApex = false) {
        return `${FastLogTool_1.FFlag['Debug']
            ? exports.GlobalURLS.TestSites[FastLogTool_1.DFString('PreferredTestSite') ? FastLogTool_1.DFString('PreferredTestSite') : 'SiteTest1'][preferApex ? 'Apex' : 'BaseUrl']
            : exports.GlobalURLS.Production[preferApex ? 'Apex' : 'BaseUrl']}`;
    }
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.ConstructServicePathFromSubDomain(System.String,System.Nullable`1,System.Nullable`1,System.Nullable`1,System.Nullable`1)}
     * Construct a serviceUri from the given parameters.
     * @param {string} subDomain Depending on if {preferApex} is set, this will construct the same url but with different times.
     * @param {string} servicePath A service path to be parsed and trimmed of trailing slashes if {trimTrailingSlashes} is set.
     * @param {Record<string, any>} queryParameters A {System.Collections.Generic.ICollection`2} of query parameters.
     * @param {boolean} fetchSecureBaseUri Determines if the baseUri should start with https (true) or http (false/null)
     * @param {boolean} preferApex Determines if the ApexDomain is used over the baseUrl.
     * @param {boolean} trimTrailingSlashes Should it trim trailing slashes away from the servicePath
     * @returns {string} Returns string
     */
    static ConstructServicePathFromSubDomain(subDomain, servicePath = '/', queryParameters = null, fetchSecureBaseUri = true, preferApex = false, trimTrailingSlashes = true) {
        const baseUrl = fetchSecureBaseUri ? BaseURL.GetSecureBaseURL(preferApex) : BaseURL.GetBaseURL(preferApex);
        let uri = '';
        let path = `${!servicePath.startsWith('/') ? `/${servicePath}` : servicePath}`;
        path = trimTrailingSlashes ? BaseURL.trim_trailing_slashes(path) : path;
        if (preferApex) {
            uri = `${subDomain}.${baseUrl}${path}`;
        }
        else {
            uri = `${BaseURL.replace_top_subdomain(baseUrl, subDomain)}${path}`;
        }
        if (queryParameters) {
            uri += `?${querystring_1.default.stringify(queryParameters)}`;
        }
        return uri;
    }
    /**
     * Comes from Roblox.Common.Client.BaseURL (BaseUrl.cs) {M:Roblox.Common.Client.BaseURL.ConstructServicePathFromHost(System.String,System.Nullable`1,System.Nullable`1,System.Nullable`1,System.Nullable`1)}
     * Construct a serviceUri from the given parameters.
     * @param {string} hostName The host to construct with.
     * @param {string} servicePath A service path to be parsed and trimmed of trailing slashes if {trimTrailingSlashes} is set.
     * @param {Record<string, any>} queryParameters A {System.Collections.Generic.ICollection`2} of query parameters.
     * @param {boolean} fetchSecureBaseUri Determines if the baseUri should start with https (true) or http (false/null)
     * @param {boolean} trimTrailingSlashes Should it trim trailing slashes away from the servicePath
     * @returns {string} Returns string
     */
    static ConstructServicePathFromHost(hostName, servicePath = '/', queryParameters = null, fetchSecureBaseUri = true, trimTrailingSlashes = true) {
        const baseUrl = fetchSecureBaseUri
            ? hostName.startsWith('http://')
                ? hostName.replace('http://', 'https://')
                : `https://${hostName}`
            : hostName.startsWith('https://')
                ? hostName.replace('https://', 'http://')
                : `http://${hostName}`;
        let path = `${!servicePath.startsWith('/') ? `/${servicePath}` : servicePath}`;
        path = trimTrailingSlashes ? BaseURL.trim_trailing_slashes(path) : path;
        let uri = `${baseUrl}${path}`;
        if (queryParameters) {
            uri += `?${querystring_1.default.stringify(queryParameters)}`;
        }
        return uri;
    }
    /**
     * @internal
     */
    static trim_trailing_slashes(str) {
        return str.replace(/\/$/, '');
    }
    /**
     * @internal
     */
    static replace_top_subdomain(str, rep) {
        return str.replace(/www/, rep);
    }
}
exports.BaseURL = BaseURL;
class UrlHelper {
    static GetRobloxGamePersistenceHost() {
        return UrlHelper.GetRobloxServiceHost('gamepersistence');
    }
    static GetRobloxServiceHost(sub) {
        return `${sub}.${UrlHelper.GetBaseHost()}`;
    }
    static GetBaseHost() {
        return BaseURL.GetBaseHost(true);
    }
}
exports.UrlHelper = UrlHelper;
exports.GlobalURLS = {
    Production: {
        Apex: 'roblox.com',
        BaseUrl: 'www.roblox.com',
    },
    TestSites: {
        Apex: 'robloxlabs.com',
        SiteTest1: {
            Apex: `sitetest1.robloxlabs.com`,
            BaseUrl: `www.sitetest1.robloxlabs.com`,
        },
        SiteTest2: {
            Apex: `sitetest2.robloxlabs.com`,
            BaseUrl: `www.sitetest2.robloxlabs.com`,
        },
        SiteTest3: {
            Apex: `sitetest3.robloxlabs.com`,
            BaseUrl: `www.sitetest3.robloxlabs.com`,
        },
        SiteTest4: {
            Apex: `sitetest4.robloxlabs.com`,
            BaseUrl: `www.sitetest4.robloxlabs.com`,
        },
    },
};
